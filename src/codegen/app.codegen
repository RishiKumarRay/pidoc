const { relative } = require('path');
const { package, changelogPath, redirects, pages, components, helpers, styles } = require('../tools/meta');
const { getChangelogVersion } = require('../tools/version');

module.exports = function () {
  const updated = process.env.BUILD_TIME;
  const version = changelogPath ? getChangelogVersion(changelogPath) : package.version;
  const routerPath = relative(__dirname, components.router);
  const notFoundPagePath = relative(__dirname, components.notFoundPage);
  const setupPath = relative(__dirname, helpers.setup);
  const pluginsPath = relative(__dirname, helpers.plugins);
  const requestPiletsPath = relative(__dirname, helpers.requestPilets);
  const sheets = styles.map((style) => `import ${JSON.stringify(relative(__dirname, style))};`).join('\n');
  const routes = [
    ...Object.keys(redirects).map(
      (from) =>
        `${JSON.stringify(from)}: ({ match }) => React.createElement(Redirect, { to: replaceAllParams(${JSON.stringify(
          redirects[from],
        )}, match.params) })`,
    ),
    ...Object.keys(pages).map(
      (path) =>
        `${JSON.stringify(path)}: React.lazy(() => import(${JSON.stringify(relative(__dirname, pages[path]))}))`,
    ),
  ].join(', ');

  return `
import * as React from "react";
import { Redirect } from "react-router-dom";
import Router from ${JSON.stringify(routerPath)};
import requestPilets from ${JSON.stringify(requestPiletsPath)};
import plugins from ${JSON.stringify(pluginsPath)};
import setup from ${JSON.stringify(setupPath)};
${sheets}

function replaceAllParams(path, params) {
  Object.keys(params).forEach(key => {
    path = path.split(':' + key).join(params[key]);
  });

  return path;
}

const NotFoundPage = React.lazy(() => import(${JSON.stringify(notFoundPagePath)}));
const version = ${JSON.stringify(version) || 'undefined'};
const updated = ${JSON.stringify(updated)};
const pages = {
  ${routes}
};

export { Router, NotFoundPage, requestPilets, pages, plugins, setup, version, updated };
`;
};
